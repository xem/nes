; Prints values in various ways to output, including numbers and strings.newline = 10; Prints indicated register to console as two hex chars and space; Preserved: A, X, Y, Pprint_a:	php	phaprint_reg_:	jsr print_hex	lda #' '	jsr print_char_	pla	plp	rtsprint_x:	php	pha	txa	jmp print_reg_print_y:	php	pha	tya	jmp print_reg_print_p:	php	pha	php	pla	jmp print_reg_print_s:	php	pha	txa	tsx	pha	inx	inx	inx	inx	jsr print_x	pla	tax	pla	plp	rts; Prints A as two hex characters, NO space after; Preserved: X, Yprint_hex:	; Update checksum	pha	jsr update_crc	pla		; Print high nibble	pha	lsr a	lsr a	lsr a	lsr a	jsr @nibble	jsr print_char_	pla		; Print low nibble	and #$0F	jsr @nibble	jmp print_char_	@nibble:	cmp #10	blt @digit	adc #6;+1 since carry is set@digit:	adc #$30	rts; Prints character and updates checksum UNLESS it's a newline.; Preserved: X, Yprint_char:	cmp #newline	beq :+	pha	jsr update_crc	pla:	jmp print_char_; Prints space. Doesn't affect checksum.; Preserved: A, X, Yprint_space:	pha	lda #' '	bne print_char_pla_rts	; always branches; Advances to next line. Doesn't affect checksum.; Preserved: A, X, Yprint_newline:	pha	lda #newlineprint_char_pla_rts:	jsr print_char_	pla	rts; Prints zero-terminated string after JSR that called this routine.; Preserved: A, X, Xprint_str:	sta temp		; Get addr of string	pla	sta addr	pla	sta addr+1	jsr inc_addr		lda temp		jsr print_str_addr	jmp (addr); Prints string; Preserved: A, X, Y.macro print_str str	jsr print_str	.byte str,0.endmacro; Prints string at addr and leaves addr pointing to; byte AFTER zero terminator.; Preserved: A, X, Yprint_str_addr:	pha	tya	pha		ldy #0	beq :+ ; always taken@loop:	jsr print_char	jsr inc_addr:	lda (addr),y	bne @loop		pla	tay	pla	; FALL THROUGH; Increments 16-bit value in addr.; Preserved: A, X, Yinc_addr:	inc addr	beq :+	rts:	inc addr+1	rts; Prints A as 1-3 digit decimal value, NO space after.; Preserved: Yprint_dec:	cmp #100	blt @tens	ldx #'0':	sbc #100	inx	cmp #100	bge :-	jsr @digit@tens:	cmp #10	blt @ones	ldx #'0':	sbc #10	inx	cmp #10	bge :-	jsr @digit@ones:	clc	adc #'0'	jmp print_char@digit:	pha	txa	jsr print_char	pla	rts; Reports value of A via low/high beeps.; Preserved: X, Ybeep_bits:	; Make reference low beep	clc	jsr @beep		; End marker	sec		; Remove high zero bits:	rol a	beq @zero	bcc :-		; Play remaining bits@loop:	php	jsr @beep	plp	asl a	bne @loop@zero:	rts@beep:	pha		; Set LSB of pitch based on carry	lda #0	adc #$FF	sta $4002		; Set up square	lda #1	sta SNDCHN	sta $4003	sta $4001		; Fade volume	lda #15:	pha	eor #$30	sta $4000	delay_msec 8	pla	clc	adc #-1	bne :-		; Silence	sta SNDCHN	delay_msec 120		pla	rts; Reports internal error and exits programinternal_error:	print_str "Internal error"	lda #1	jmp exit